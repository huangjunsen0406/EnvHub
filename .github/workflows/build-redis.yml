name: Build Redis Binaries

on:
  workflow_dispatch:
    inputs:
      redis_versions:
        description: 'Redis versions (comma-separated, e.g., 7.2.11,8.0.4,8.2.2)'
        required: true
        default: '6.2.20,7.0.15,7.2.11,7.4.6,8.0.4,8.2.2'
  schedule:
    - cron: '0 2 * * 0'  # weekly

jobs:
  parse-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.parse.outputs.versions }}
    steps:
      - name: Parse version list
        id: parse
        run: |
          if [ -n "${{ github.event.inputs.redis_versions }}" ]; then
            VERSIONS="${{ github.event.inputs.redis_versions }}"
          else
            VERSIONS=$(curl -fsSL "https://api.github.com/repos/redis/redis/tags?per_page=100" | \
              jq -r '.[].name' | grep -E '^[678]\.[0-9]+\.[0-9]+$' | sort -V | tail -6 | \
              tr '\n' ',' | sed 's/,$//')
          fi
          VERSIONS_JSON=$(echo "$VERSIONS" | jq -Rc 'split(",") | map(select(length>0))')
          echo "versions=$VERSIONS_JSON" >> "$GITHUB_OUTPUT"
          echo "Will build: $VERSIONS_JSON"

  ensure-release:
    needs: parse-versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.parse-versions.outputs.versions) }}
    steps:
      - name: Ensure release exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="redis-${{ matrix.version }}"
          gh release view "$TAG" --repo "${{ github.repository }}" >/dev/null 2>&1 || \
            gh release create "$TAG" --repo "${{ github.repository }}" \
              --title "Redis ${{ matrix.version }}" \
              --notes "Auto-created by CI"

  build-redis:
    needs: [parse-versions, ensure-release]
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.parse-versions.outputs.versions) }}
        target:
          - { os: ubuntu-20.04,    platform: linux-x64,    ext: tar.gz }
          - { os: macos-14,       platform: darwin-arm64, ext: tar.gz }
          - { os: macos-13,       platform: darwin-x64,   ext: tar.gz }
          - { os: windows-latest, platform: win-x64,      ext: zip }
    runs-on: ${{ matrix.target.os }}
    concurrency:
      group: build-${{ matrix.version }}-${{ matrix.target.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Check asset exists
        id: check
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PREFIX="redis-${{ matrix.version }}-${{ matrix.target.platform }}"
          if gh release view "redis-${{ matrix.version }}" --repo "${{ github.repository }}" >/dev/null 2>&1; then
            ASSETS=$(gh release view "redis-${{ matrix.version }}" --repo "${{ github.repository }}" --json assets -q '.assets[].name' || true)
            if echo "$ASSETS" | grep -q "^${PREFIX}\b"; then
              echo "exists=true" >> "$GITHUB_OUTPUT"
              echo "Asset already exists: ${PREFIX}"
              exit 0
            fi
          fi
          echo "exists=false" >> "$GITHUB_OUTPUT"

      # ---------- Unix deps (TLS needs OpenSSL dev) ----------
      - name: Install deps (Linux)
        if: steps.check.outputs.exists != 'true' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev curl ca-certificates

      - name: Install deps (macOS)
        if: steps.check.outputs.exists != 'true' && runner.os == 'macOS'
        run: |
          brew update
          brew install openssl@3 pkg-config
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

      # ---------- Download source (Unix) ----------
      - name: Download Redis source (Unix)
        if: steps.check.outputs.exists != 'true' && runner.os != 'Windows'
        shell: bash
        run: |
          V=${{ matrix.version }}
          curl -fSLO "https://download.redis.io/releases/redis-${V}.tar.gz"
          tar xzf "redis-${V}.tar.gz"
          mv "redis-${V}" redis-src

      # ---------- Build & package (Unix, TLS) ----------
      - name: Build & package (Unix, TLS)
        if: steps.check.outputs.exists != 'true' && runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          cd redis-src
          if [ "$(uname)" = "Darwin" ]; then
            make BUILD_TLS=yes MALLOC=libc -j"$(sysctl -n hw.ncpu)"
          else
            make BUILD_TLS=yes -j"$(nproc)"
          fi
          STAGE="$PWD/pkgroot"
          rm -rf "$STAGE" && mkdir -p "$STAGE"
          make PREFIX="$STAGE" install
          mkdir -p "$STAGE/etc" "$STAGE/var/log" "$STAGE/var/lib"
          cp redis.conf "$STAGE/etc/" || true
          [ -f sentinel.conf ] && cp sentinel.conf "$STAGE/etc/" || true
          cat > "$STAGE/etc/redis.envhub.example.conf" <<'EOF'
          port 6379
          daemonize no
          dir ./var/lib
          logfile ./var/log/redis.log
          # requirepass your_password_here
          # tls-port 0
          EOF
          # shrink (ignore failures)
          find "$STAGE" -type f -perm -111 -exec strip {} + 2>/dev/null || true
          tar -C "$STAGE" -czf "../redis-${{ matrix.version }}-${{ matrix.target.platform }}.tar.gz" .

      # ---------- Windows: fetch prebuilt from redis-windows & repackage ----------
      - name: Download Windows ZIP (redis-windows) and repackage
        if: steps.check.outputs.exists != 'true' && runner.os == 'Windows'
        shell: pwsh
        run: |
          $v = "${{ matrix.version }}"
          $repo = "redis-windows/redis-windows"
          $rels = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases" -Headers @{ "Accept"="application/vnd.github+json" }
          $rel = $rels | Where-Object { $_.tag_name -eq $v } | Select-Object -First 1
          if (-not $rel) { throw "No redis-windows release for $v" }
          $asset = $rel.assets | Where-Object { $_.name -match "Redis-$v-Windows-x64-(msys2|cygwin)\.zip$" } | Select-Object -First 1
          if (-not $asset) { throw "No suitable Windows asset found for $v" }
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile win-src.zip

          New-Item -Type Directory pkgroot\bin,pkgroot\etc,pkgroot\var\log,pkgroot\var\lib | Out-Null
          Expand-Archive -Path win-src.zip -DestinationPath tmp -Force
          Get-ChildItem -Recurse tmp -Include redis-server.exe,redis-cli.exe,redis-benchmark.exe,redis-check-aof.exe,redis-check-rdb.exe | ForEach-Object {
            Copy-Item $_.FullName pkgroot\bin\
          }
          @"
          port 6379
          dir .\\var\\lib
          logfile .\\var\\log\\redis.log
          # requirepass your_password_here
          "@ | Out-File -Encoding UTF8 pkgroot\etc\redis.envhub.example.conf

          Compress-Archive -Path pkgroot\* -DestinationPath "redis-${{ matrix.version }}-${{ matrix.target.platform }}.zip" -Force

      # ---------- Checksums ----------
      - name: Generate checksums
        if: steps.check.outputs.exists != 'true'
        shell: bash
        run: |
          FILE="redis-${{ matrix.version }}-${{ matrix.target.platform }}.${{ matrix.target.ext }}"
          if [ "${{ runner.os }}" = "macOS" ]; then
            shasum -a 256 "$FILE" | tee "${FILE}.sha256"
          elif [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile "$FILE" SHA256 | sed -n '2p' | tr -d '\r' | \
              awk -v f="$FILE" '{print $1"  "f}' | tee "${FILE}.sha256"
          else
            sha256sum "$FILE" | tee "${FILE}.sha256"
          fi

      # ---------- Upload to Release ----------
      - name: Upload to GitHub Release
        if: steps.check.outputs.exists != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: redis-${{ matrix.version }}
          name: Redis ${{ matrix.version }}
          draft: false
          prerelease: false
          append_body: true
          overwrite_files: true
          fail_on_unmatched_files: true
          body: |
            Portable archives (extract -> configure -> start).
            - Linux x64 / macOS (ARM64 & x64): built from source with TLS, includes etc/ and var/.
            - Windows x64: taken from redis-windows release and rearranged to the same portable layout.
            Usage:
              Unix: ./bin/redis-server ./etc/redis.envhub.example.conf
              Win : .\bin\redis-server.exe .\etc\redis.envhub.example.conf
          files: |
            redis-${{ matrix.version }}-${{ matrix.target.platform }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [parse-versions, build-redis]
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Redis build finished" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Versions: ${{ needs.parse-versions.outputs.versions }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Platforms:" >> "$GITHUB_STEP_SUMMARY"
          echo "- Linux x64" >> "$GITHUB_STEP_SUMMARY"
          echo "- macOS ARM64 / x64" >> "$GITHUB_STEP_SUMMARY"
          echo "- Windows x64 (redis-windows portable ZIP)" >> "$GITHUB_STEP_SUMMARY"
