name: Build Redis Binaries (Linux & macOS)

on:
  workflow_dispatch:
    inputs:
      redis_versions:
        description: 'Redis versions (comma-separated, e.g., 7.2.11,8.0.4,8.2.2)'
        required: false
        default: '6.2.20,7.0.15,7.2.11,7.4.6,8.0.4,8.2.2'
      build_with_modules:
        description: 'Enable BUILD_WITH_MODULES for Redis 8.x (needs Rust toolchain)'
        required: false
        default: 'false'
  schedule:
    - cron: '0 2 * * 0' # weekly

jobs:
  parse-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.parse.outputs.versions }}
      with_modules: ${{ steps.parse.outputs.with_modules }}
    steps:
      - name: Parse version list (manual or latest)
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.redis_versions || '' }}" ]; then
            VERSIONS="${{ github.event.inputs.redis_versions }}"
          else
            # fallback：抓取最近 6 个 x.y.z 标签
            VERSIONS=$(curl -fsSL "https://api.github.com/repos/redis/redis/tags?per_page=150" \
              | jq -r '.[].name' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
              | sort -V | tail -6 | tr '\n' ',' | sed 's/,$//')
          fi
          VERSIONS_JSON=$(echo "$VERSIONS" | jq -Rc 'split(",") | map(select(length>0))')
          echo "versions=$VERSIONS_JSON" >> "$GITHUB_OUTPUT"

          WITH_MODULES="${{ github.event.inputs.build_with_modules || 'false' }}"
          echo "with_modules=$WITH_MODULES" >> "$GITHUB_OUTPUT"
          echo "Will build: $VERSIONS_JSON (BUILD_WITH_MODULES=$WITH_MODULES)"

  ensure-release:
    needs: parse-versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.parse-versions.outputs.versions) }}
    steps:
      - name: Ensure release exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="redis-${{ matrix.version }}"
          gh release view "$TAG" --repo "${{ github.repository }}" >/dev/null 2>&1 || \
            gh release create "$TAG" --repo "${{ github.repository }}" \
              --title "Redis ${{ matrix.version }}" \
              --notes "Auto-created by CI"

  build:
    needs: [parse-versions, ensure-release]
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.parse-versions.outputs.versions) }}
        target:
          - { os: ubuntu-22.04, platform: linux-x64, ext: tar.gz }
          - { os: macos-14, platform: darwin-arm64, ext: tar.gz }
          - { os: macos-13, platform: darwin-x64, ext: tar.gz }
    runs-on: ${{ matrix.target.os }}
    concurrency:
      group: build-${{ matrix.version }}-${{ matrix.target.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if asset already exists (skip if present)
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PREFIX="redis-${{ matrix.version }}-${{ matrix.target.platform }}"
          ASSETS=$(gh release view "redis-${{ matrix.version }}" --repo "${{ github.repository }}" --json assets -q '.assets[].name' || true)
          if echo "$ASSETS" | grep -q "^${PREFIX}\."; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Asset already exists: ${PREFIX}"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Deps ----------
      - name: Install deps (Linux)
        if: steps.check.outputs.exists != 'true' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev curl ca-certificates jq

      - name: Install deps (macOS)
        if: steps.check.outputs.exists != 'true' && runner.os == 'macOS'
        run: |
          brew update
          brew install openssl@3 pkg-config jq
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

      - name: Ensure Rust toolchain when BUILD_WITH_MODULES=true
        if: steps.check.outputs.exists != 'true' && needs.parse-versions.outputs.with_modules == 'true'
        shell: bash
        run: |
          if ! command -v rustc >/dev/null 2>&1; then
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi
          rustc --version || true
          cargo --version || true

      # ---------- Download source ----------
      - name: Download Redis source
        if: steps.check.outputs.exists != 'true'
        shell: bash
        run: |
          set -e
          V=${{ matrix.version }}
          curl -fSLO "https://download.redis.io/releases/redis-${V}.tar.gz"
          tar xzf "redis-${V}.tar.gz"
          mv "redis-${V}" redis-src

      # ---------- Build ----------
      - name: Build (TLS + optional modules)
        if: steps.check.outputs.exists != 'true'
        shell: bash
        run: |
          set -e
          cd redis-src
          make distclean || true
          export BUILD_TLS=yes
          if [ "${{ needs.parse-versions.outputs.with_modules }}" = "true" ]; then
            export BUILD_WITH_MODULES=yes
            export INSTALL_RUST_TOOLCHAIN=yes
            export DISABLE_WERRORS=yes
          fi
          if [ "$(uname)" = "Darwin" ]; then
            make MALLOC=libc -j"$(sysctl -n hw.ncpu)" all
          else
            make -j"$(nproc)" all
          fi

      # ---------- Stage & package ----------
      - name: Package portable tarball
        if: steps.check.outputs.exists != 'true'
        shell: bash
        run: |
          set -e
          cd redis-src
          STAGE="$PWD/pkgroot"
          rm -rf "$STAGE" && mkdir -p "$STAGE"
          make PREFIX="$STAGE" install
          mkdir -p "$STAGE/etc" "$STAGE/var/log" "$STAGE/var/lib"

          # Redis 8.x 带 redis-full.conf（全组件自说明），旧版本回退 redis.conf
          if [ -f "redis-full.conf" ]; then
            cp redis-full.conf "$STAGE/etc/"
          fi
          [ -f redis.conf ] && cp redis.conf "$STAGE/etc/"

          cat > "$STAGE/etc/redis.envhub.example.conf" <<'EOF'
          port 6379
          daemonize no
          dir ./var/lib
          logfile ./var/log/redis.log
          # requirepass your_password_here
          # tls-port 0
          EOF

          # 瘦身（忽略失败）
          find "$STAGE" -type f -perm -111 -exec strip {} + 2>/dev/null || true

          tar -C "$STAGE" -czf "../redis-${{ matrix.version }}-${{ matrix.target.platform }}.tar.gz" .

      - name: Generate checksums
        if: steps.check.outputs.exists != 'true'
        shell: bash
        run: |
          FILE="redis-${{ matrix.version }}-${{ matrix.target.platform }}.tar.gz"
          if [ "${{ runner.os }}" = "macOS" ]; then
            shasum -a 256 "$FILE" | tee "${FILE}.sha256"
          else
            sha256sum "$FILE" | tee "${FILE}.sha256"
          fi

      - name: Upload to GitHub Release
        if: steps.check.outputs.exists != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: redis-${{ matrix.version }}
          name: Redis ${{ matrix.version }}
          draft: false
          prerelease: false
          append_body: true
          overwrite_files: false
          fail_on_unmatched_files: true
          body: |
            Portable archives (extract → configure → start).
            - Linux x64 / macOS (ARM64 & x64), built from source with TLS
            - Includes etc/ and var/ layout
            Usage:
              Unix: ./bin/redis-server ./etc/redis.envhub.example.conf
            Notes:
              - For Redis 8.x, redis-full.conf (self-documented) is included when present.
              - You can enable BUILD_WITH_MODULES via workflow input (requires Rust).
          files: |
            redis-${{ matrix.version }}-${{ matrix.target.platform }}.tar.gz
            redis-${{ matrix.version }}-${{ matrix.target.platform }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [parse-versions, build]
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Redis build finished" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Versions: ${{ needs.parse-versions.outputs.versions }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Platforms:" >> "$GITHUB_STEP_SUMMARY"
          echo "- Linux x64" >> "$GITHUB_STEP_SUMMARY"
          echo "- macOS ARM64 / x64" >> "$GITHUB_STEP_SUMMARY"
